=begin comment

mb-mail-service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailService::CraterenderApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailService::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailService::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailService::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# render_html_route_get
#
# 
#
# @param string $template_id Template to render (required)
# @param string $lang Language to render the template with (optional)
{
    my $params = {
    'template_id' => {
        data_type => 'string',
        description => 'Template to render',
        required => '1',
    },
    'lang' => {
        data_type => 'string',
        description => 'Language to render the template with',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'render_html_route_get' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub render_html_route_get {
    my ($self, %args) = @_;

    # verify the required parameter 'template_id' is set
    unless (exists $args{'template_id'}) {
      croak("Missing the required parameter 'template_id' when calling render_html_route_get");
    }

    # parse inputs
    my $_resource_path = '/templates/{template_id}/html';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'lang'}) {
        $query_params->{'lang'} = $self->{api_client}->to_query_value($args{'lang'});
    }

    # path params
    if ( exists $args{'template_id'}) {
        my $_base_variable = "{" . "template_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# render_html_route_post
#
# 
#
# @param string $template_id Template to render (required)
# @param object $body  (required)
# @param string $lang Language to render the template with (optional)
{
    my $params = {
    'template_id' => {
        data_type => 'string',
        description => 'Template to render',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'lang' => {
        data_type => 'string',
        description => 'Language to render the template with',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'render_html_route_post' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub render_html_route_post {
    my ($self, %args) = @_;

    # verify the required parameter 'template_id' is set
    unless (exists $args{'template_id'}) {
      croak("Missing the required parameter 'template_id' when calling render_html_route_post");
    }

    # parse inputs
    my $_resource_path = '/templates/{template_id}/html';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'lang'}) {
        $query_params->{'lang'} = $self->{api_client}->to_query_value($args{'lang'});
    }

    # path params
    if ( exists $args{'template_id'}) {
        my $_base_variable = "{" . "template_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# render_text_route_get
#
# 
#
# @param string $template_id Template to render (required)
# @param string $lang Language to render the template with (optional)
{
    my $params = {
    'template_id' => {
        data_type => 'string',
        description => 'Template to render',
        required => '1',
    },
    'lang' => {
        data_type => 'string',
        description => 'Language to render the template with',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'render_text_route_get' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub render_text_route_get {
    my ($self, %args) = @_;

    # verify the required parameter 'template_id' is set
    unless (exists $args{'template_id'}) {
      croak("Missing the required parameter 'template_id' when calling render_text_route_get");
    }

    # parse inputs
    my $_resource_path = '/templates/{template_id}/text';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'lang'}) {
        $query_params->{'lang'} = $self->{api_client}->to_query_value($args{'lang'});
    }

    # path params
    if ( exists $args{'template_id'}) {
        my $_base_variable = "{" . "template_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# render_text_route_post
#
# 
#
# @param string $template_id Template to render (required)
# @param object $body  (required)
# @param string $lang Language to render the template with (optional)
{
    my $params = {
    'template_id' => {
        data_type => 'string',
        description => 'Template to render',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'lang' => {
        data_type => 'string',
        description => 'Language to render the template with',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'render_text_route_post' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub render_text_route_post {
    my ($self, %args) = @_;

    # verify the required parameter 'template_id' is set
    unless (exists $args{'template_id'}) {
      croak("Missing the required parameter 'template_id' when calling render_text_route_post");
    }

    # parse inputs
    my $_resource_path = '/templates/{template_id}/text';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'lang'}) {
        $query_params->{'lang'} = $self->{api_client}->to_query_value($args{'lang'});
    }

    # path params
    if ( exists $args{'template_id'}) {
        my $_base_variable = "{" . "template_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
